name: "units-test"
on:
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'
    paths-ignore:
      - '**.md'

jobs:
  # unit tests
  units:
    name: Unit Tests

    strategy:
      matrix:
        runs-on: [ ubuntu-latest, windows-latest, macos-latest ]
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}

    steps:
    - uses: actions/checkout@v4
    - run: npm ci
    - run: npm test

  # test setup action works for multiple versions of SQLite using version/year combination
  test-version-year:
    name: Setup Version/Year Test
    needs: units # wait until the unit tests completed before executing the following tests

    strategy:
      matrix:
        runs-on: [ ubuntu-latest, windows-latest, macos-latest ]
        sqlite:
          - version: 3.40.0
            year: 2022
          # - version: 3.43.2
          #   year: 2023
          # - version: 3.44.0
          #   year: 2023
          - version: 3.47.2
            year: 2024
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 16.x
        cache: 'npm'
    - run: npm ci
    - run: npm run prepare
    - name: Setup SQLite v${{ matrix.sqlite.version }} Version/Year Test
      # use local distribution until we release an official version
      #   ccorsi/setup-sqlite@v1
      uses: ./
      with:
        sqlite-version: ${{ matrix.sqlite.version }}
        sqlite-year: ${{ matrix.sqlite.year }}
    - run: sqlite3 --version
    # - name: Run executable on windows
    #   if: runner.os == 'Windows'
    #   run: sqlite3.exe --version
    # - name: Run executable on linux or macos
    #   if: runner.os != 'Windows'
    #   run: sqlite3 --version

  # test setup action works for multiple versions of SQLite using version
  test-version:
    name: Setup Version Test
    needs: test-version-year # wait until the test-version-year tests completed before executing the following tests

    strategy:
      matrix:
        runs-on: [ ubuntu-latest, windows-latest, macos-latest ]
        sqlite: [
          # 3.44.0, 
          3.43.0
        ]
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 16.x
        cache: 'npm'
    - run: npm ci
    - run: npm run prepare
    - name: Setup SQLite v${{ matrix.sqlite }} Version Only Test
      # use local distribution until we release an official version
      #   ccorsi/setup-sqlite@v1
      uses: ./
      with:
        sqlite-version: ${{ matrix.sqlite }}
    - run: sqlite3 --version
    # - name: Run executable on windows
    #   if: runner.os == 'Windows'
    #   run: sqlite3.exe --version
    # - name: Run executable on linux or macos
    #   if: runner.os != 'Windows'
    #   run: sqlite3 --version

  # test setup action works with latest version of SQLite
  test-latest:
    name: Setup Test Latest SQLite Version
    needs: test-version # wait until the test-version tests completed before executing the following tests

    strategy:
      matrix:
        runs-on: [ ubuntu-latest, windows-latest, macos-latest ]
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 16.x
        cache: 'npm'
    - run: npm ci
    - run: npm run prepare
    - name: Setup Latest SQLite Version Test
      # use local distribution until we release an official version
      #   ccorsi/setup-sqlite@v1
      uses: ./
    - run: sqlite3 --version
    # - name: Run executable on windows
    #   if: runner.os == 'Windows'
    #   run: sqlite3.exe --version
    # - name: Run executable on linux or macos
    #   if: runner.os != 'Windows'
    #   run: sqlite3 --version
